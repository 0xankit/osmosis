syntax = "proto3";
package osmosis.launchpad.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/osmosis-labs/osmosis/x/launchpad/api";
option (gogoproto.goproto_getters_all) = false;

service Msg {
  // CreateLBP creates new liquidity bootstraping pool.
  rpc CreateLBP(MsgCreateLBP) returns (MsgCreateLBPResponse);

  // Subscribe to a token sale. Any use any time before the sale end can join
  // the sale by adding `token_in`. During the sale his `token_in` will be
  // automatically charged every epoch to purchase `token_out`.
  rpc Subscribe(MsgSubscribe) returns (google.protobuf.Empty);

  // Withdraw sends back `amount` of unspent tokens_in back to the user.
  // User can do it any time unless his deposit is empty.
  rpc Withdraw(MsgWithdraw) returns (google.protobuf.Empty);

  // ExitLBP withdraws purchased tokens_out from the pool and remained
  // tokens_in. Returns error if the LBP is still active.
  rpc ExitLBP(MsgExitLBP) returns (MsgExitLBPResponse);

  // FinalizeLBP sends income (earned tokens_in) to the LBP treasury.
  // Returns error if called before the LBP finishes. Anyone can call this
  // method.
  rpc FinalizeLBP(MsgFinalizeLBP) returns (MsgFinalizeLBPResponse);
}

message MsgCreateLBP {
  // Pool creator
  string creator = 1;
  // token_in a denom used to buy LB tokens (`token_out`). May be referred as
  // quote_currency.
  string token_in = 2;
  // token_out a token denom to be bootstraped. May be referred as base
  // currency.
  string token_out = 3;

  // start time when the token sale starts.
  google.protobuf.Timestamp start_time = 4
      [ (gogoproto.nullable) = false, (gogoproto.stdtime) = true ];
  // duration time that the sale takes place over
  google.protobuf.Duration duration = 5
      [ (gogoproto.nullable) = false, (gogoproto.stdduration) = true ];

  // total number of `tokens_out` to be sold during the continous sale.
  // tokens are deposited from the treasury account.
  // TODO: change to `creator`
  string initial_deposit = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];

  // Treasury is the account which provides the tokens to sale and receives
  // earned money.
  string treasury = 7;
}

message MsgCreateLBPResponse {
  uint64 pool_id = 1 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
}

message MsgSubscribe {
  // sender is an account address adding a deposit
  string sender = 1;
  // pool_id is a valid ID of this module LBP
  uint64 pool_id = 2 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
  // number of pool.token_in staked by a user.
  string amount = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message MsgWithdraw {
  // sender is an account address exiting a pool
  string sender = 1;
  uint64 pool_id = 2 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
  // amount of in_tokens to withdraw, must be at most the amount of not spent
  // tokens, unless set to null - then all remaining balance will be withdrawn
  string amount = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = true
  ];
}

message MsgExitLBP {
  // sender is an account address exiting a pool
  string sender = 1;
  uint64 pool_id = 2 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
}

message MsgExitLBPResponse {
  // Purchased amount of "out" tokens withdrawn to the user.
  string purchased = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message MsgFinalizeLBP {
  // sender is an account address triggering the finalization.
  string sender = 1;
  uint64 pool_id = 2 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
}

message MsgFinalizeLBPResponse {
  // Income amount of token_in sent to the treasury.
  string income = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}
