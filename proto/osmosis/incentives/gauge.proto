syntax = "proto3";
package osmosis.incentives;

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/v1beta1/coin.proto";
import "osmosis/lockup/lock.proto";

option go_package = "github.com/osmosis-labs/osmosis/x/incentives/types";

message Gauge {
  uint64 id = 1;         // unique ID of a Gauge
  bool is_perpetual = 2; // flag to show if it's perpetual or multi-epoch
                         // distribution incentives by third party
  // Rewards are distributed to lockups that are are returned by at least one of
  // these queries
  osmosis.lockup.QueryCondition distribute_to = 3
      [ (gogoproto.nullable) = false ];
  repeated cosmos.base.v1beta1.Coin coins = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ]; // can distribute multiple coins
  // distribution start time
  google.protobuf.Timestamp start_time = 5 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"start_time\""
  ];
  uint64 num_epochs_paid_over = 6; // number of epochs distribution will be done
  uint64 filled_epochs = 7;        // number of epochs distributed already
  repeated cosmos.base.v1beta1.Coin distributed_coins = 8 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ]; // already distributed coins
}

message LockableDurationsInfo {
  repeated google.protobuf.Duration lockable_durations = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true,
    (gogoproto.moretags) = "yaml:\"lockable_durations\""
  ];
}

// HistoricalReward stores the accumulator value for rewards
message HistoricalReward {
  // Reward per share for each denom
  repeated cosmos.base.v1beta1.DecCoin cumulative_reward_ratio = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"
  ];
  int64 epoch = 2;
}

// CurrentReward stores reward at the latest reward for each denom + lockDuration
message CurrentReward {
  int64 last_processed_epoch = 1;
  // total shares locked for the denom + lockDuration
  cosmos.base.v1beta1.Coin total_shares = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"
  ];
  // total reward that is to be distributed
  repeated cosmos.base.v1beta1.Coin rewards = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  // denom of share
  string denom = 4;
  google.protobuf.Duration lock_duration = 5 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"duration\""
  ];
}

// LastEligibleEpochByDurationAndDenom is a struct to store the latest epoch for each denom + lock duration combination
message LastEligibleEpochByDurationAndDenom {
  string denom =1;
  google.protobuf.Duration lock_duration = 2 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"duration\""
  ];
  int64 epoch = 3;
}

// PeriodLockReward stores total rewards that could be claimed for each individual lock
message PeriodLockReward {
  uint64 lock_id = 1;
  repeated cosmos.base.v1beta1.Coin rewards = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  repeated LastEligibleEpochByDurationAndDenom last_eligible_epochs = 3;
}