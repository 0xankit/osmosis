// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/incentives/gauge.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/osmosis-labs/osmosis/x/lockup/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Gauge struct {
	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsPerpetual bool   `protobuf:"varint,2,opt,name=is_perpetual,json=isPerpetual,proto3" json:"is_perpetual,omitempty"`
	// distribution incentives by third party
	// Rewards are distributed to lockups that are are returned by at least one of
	// these queries
	DistributeTo types.QueryCondition                     `protobuf:"bytes,3,opt,name=distribute_to,json=distributeTo,proto3" json:"distribute_to"`
	Coins        github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
	// distribution start time
	StartTime         time.Time                                `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
	NumEpochsPaidOver uint64                                   `protobuf:"varint,6,opt,name=num_epochs_paid_over,json=numEpochsPaidOver,proto3" json:"num_epochs_paid_over,omitempty"`
	FilledEpochs      uint64                                   `protobuf:"varint,7,opt,name=filled_epochs,json=filledEpochs,proto3" json:"filled_epochs,omitempty"`
	DistributedCoins  github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,8,rep,name=distributed_coins,json=distributedCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"distributed_coins"`
}

func (m *Gauge) Reset()         { *m = Gauge{} }
func (m *Gauge) String() string { return proto.CompactTextString(m) }
func (*Gauge) ProtoMessage()    {}
func (*Gauge) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0304e2bb0159901, []int{0}
}
func (m *Gauge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Gauge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Gauge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Gauge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gauge.Merge(m, src)
}
func (m *Gauge) XXX_Size() int {
	return m.Size()
}
func (m *Gauge) XXX_DiscardUnknown() {
	xxx_messageInfo_Gauge.DiscardUnknown(m)
}

var xxx_messageInfo_Gauge proto.InternalMessageInfo

func (m *Gauge) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Gauge) GetIsPerpetual() bool {
	if m != nil {
		return m.IsPerpetual
	}
	return false
}

func (m *Gauge) GetDistributeTo() types.QueryCondition {
	if m != nil {
		return m.DistributeTo
	}
	return types.QueryCondition{}
}

func (m *Gauge) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

func (m *Gauge) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *Gauge) GetNumEpochsPaidOver() uint64 {
	if m != nil {
		return m.NumEpochsPaidOver
	}
	return 0
}

func (m *Gauge) GetFilledEpochs() uint64 {
	if m != nil {
		return m.FilledEpochs
	}
	return 0
}

func (m *Gauge) GetDistributedCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.DistributedCoins
	}
	return nil
}

type LockableDurationsInfo struct {
	LockableDurations []time.Duration `protobuf:"bytes,1,rep,name=lockable_durations,json=lockableDurations,proto3,stdduration" json:"lockable_durations" yaml:"lockable_durations"`
}

func (m *LockableDurationsInfo) Reset()         { *m = LockableDurationsInfo{} }
func (m *LockableDurationsInfo) String() string { return proto.CompactTextString(m) }
func (*LockableDurationsInfo) ProtoMessage()    {}
func (*LockableDurationsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0304e2bb0159901, []int{1}
}
func (m *LockableDurationsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockableDurationsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockableDurationsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockableDurationsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockableDurationsInfo.Merge(m, src)
}
func (m *LockableDurationsInfo) XXX_Size() int {
	return m.Size()
}
func (m *LockableDurationsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LockableDurationsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LockableDurationsInfo proto.InternalMessageInfo

func (m *LockableDurationsInfo) GetLockableDurations() []time.Duration {
	if m != nil {
		return m.LockableDurations
	}
	return nil
}

// HistoricalReward stores the accumulator value for rewards
type HistoricalReward struct {
	// Reward per share for each denom
	CumulativeRewardRatio github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=cumulative_reward_ratio,json=cumulativeRewardRatio,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"cumulative_reward_ratio"`
	Epoch                 int64                                       `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *HistoricalReward) Reset()         { *m = HistoricalReward{} }
func (m *HistoricalReward) String() string { return proto.CompactTextString(m) }
func (*HistoricalReward) ProtoMessage()    {}
func (*HistoricalReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0304e2bb0159901, []int{2}
}
func (m *HistoricalReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoricalReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoricalReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoricalReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoricalReward.Merge(m, src)
}
func (m *HistoricalReward) XXX_Size() int {
	return m.Size()
}
func (m *HistoricalReward) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoricalReward.DiscardUnknown(m)
}

var xxx_messageInfo_HistoricalReward proto.InternalMessageInfo

func (m *HistoricalReward) GetCumulativeRewardRatio() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.CumulativeRewardRatio
	}
	return nil
}

func (m *HistoricalReward) GetEpoch() int64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

// CurrentReward stores reward at the latest reward for each denom + lockDuration
type CurrentReward struct {
	LastProcessedEpoch int64 `protobuf:"varint,1,opt,name=last_processed_epoch,json=lastProcessedEpoch,proto3" json:"last_processed_epoch,omitempty"`
	// total shares locked for the denom + lockDuration
	TotalShares types1.Coin `protobuf:"bytes,2,opt,name=total_shares,json=totalShares,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"total_shares"`
	// total reward that is to be distributed
	Rewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=rewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"rewards"`
	// denom of share
	LockDenom    string        `protobuf:"bytes,4,opt,name=lock_denom,json=lockDenom,proto3" json:"lock_denom,omitempty"`
	LockDuration time.Duration `protobuf:"bytes,5,opt,name=lock_duration,json=lockDuration,proto3,stdduration" json:"lock_duration" yaml:"duration"`
}

func (m *CurrentReward) Reset()         { *m = CurrentReward{} }
func (m *CurrentReward) String() string { return proto.CompactTextString(m) }
func (*CurrentReward) ProtoMessage()    {}
func (*CurrentReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0304e2bb0159901, []int{3}
}
func (m *CurrentReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrentReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrentReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrentReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentReward.Merge(m, src)
}
func (m *CurrentReward) XXX_Size() int {
	return m.Size()
}
func (m *CurrentReward) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentReward.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentReward proto.InternalMessageInfo

func (m *CurrentReward) GetLastProcessedEpoch() int64 {
	if m != nil {
		return m.LastProcessedEpoch
	}
	return 0
}

func (m *CurrentReward) GetTotalShares() types1.Coin {
	if m != nil {
		return m.TotalShares
	}
	return types1.Coin{}
}

func (m *CurrentReward) GetRewards() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *CurrentReward) GetLockDenom() string {
	if m != nil {
		return m.LockDenom
	}
	return ""
}

func (m *CurrentReward) GetLockDuration() time.Duration {
	if m != nil {
		return m.LockDuration
	}
	return 0
}

// LastEligibleEpochByDurationAndDenom is a struct to store the latest epoch for each denom + lock duration combination
type LastEligibleEpochByDurationAndDenom struct {
	Denom        string        `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	LockDuration time.Duration `protobuf:"bytes,2,opt,name=lock_duration,json=lockDuration,proto3,stdduration" json:"lock_duration" yaml:"duration"`
	Epoch        int64         `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *LastEligibleEpochByDurationAndDenom) Reset()         { *m = LastEligibleEpochByDurationAndDenom{} }
func (m *LastEligibleEpochByDurationAndDenom) String() string { return proto.CompactTextString(m) }
func (*LastEligibleEpochByDurationAndDenom) ProtoMessage()    {}
func (*LastEligibleEpochByDurationAndDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0304e2bb0159901, []int{4}
}
func (m *LastEligibleEpochByDurationAndDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastEligibleEpochByDurationAndDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastEligibleEpochByDurationAndDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastEligibleEpochByDurationAndDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastEligibleEpochByDurationAndDenom.Merge(m, src)
}
func (m *LastEligibleEpochByDurationAndDenom) XXX_Size() int {
	return m.Size()
}
func (m *LastEligibleEpochByDurationAndDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_LastEligibleEpochByDurationAndDenom.DiscardUnknown(m)
}

var xxx_messageInfo_LastEligibleEpochByDurationAndDenom proto.InternalMessageInfo

func (m *LastEligibleEpochByDurationAndDenom) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *LastEligibleEpochByDurationAndDenom) GetLockDuration() time.Duration {
	if m != nil {
		return m.LockDuration
	}
	return 0
}

func (m *LastEligibleEpochByDurationAndDenom) GetEpoch() int64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

// PeriodLockReward stores total rewards that could be claimed for each individual lock
type PeriodLockReward struct {
	LockId             uint64                                   `protobuf:"varint,1,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
	Rewards            github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=rewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"rewards"`
	LastEligibleEpochs []*LastEligibleEpochByDurationAndDenom   `protobuf:"bytes,3,rep,name=last_eligible_epochs,json=lastEligibleEpochs,proto3" json:"last_eligible_epochs,omitempty"`
}

func (m *PeriodLockReward) Reset()         { *m = PeriodLockReward{} }
func (m *PeriodLockReward) String() string { return proto.CompactTextString(m) }
func (*PeriodLockReward) ProtoMessage()    {}
func (*PeriodLockReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0304e2bb0159901, []int{5}
}
func (m *PeriodLockReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeriodLockReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeriodLockReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeriodLockReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeriodLockReward.Merge(m, src)
}
func (m *PeriodLockReward) XXX_Size() int {
	return m.Size()
}
func (m *PeriodLockReward) XXX_DiscardUnknown() {
	xxx_messageInfo_PeriodLockReward.DiscardUnknown(m)
}

var xxx_messageInfo_PeriodLockReward proto.InternalMessageInfo

func (m *PeriodLockReward) GetLockId() uint64 {
	if m != nil {
		return m.LockId
	}
	return 0
}

func (m *PeriodLockReward) GetRewards() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *PeriodLockReward) GetLastEligibleEpochs() []*LastEligibleEpochByDurationAndDenom {
	if m != nil {
		return m.LastEligibleEpochs
	}
	return nil
}

func init() {
	proto.RegisterType((*Gauge)(nil), "osmosis.incentives.Gauge")
	proto.RegisterType((*LockableDurationsInfo)(nil), "osmosis.incentives.LockableDurationsInfo")
	proto.RegisterType((*HistoricalReward)(nil), "osmosis.incentives.HistoricalReward")
	proto.RegisterType((*CurrentReward)(nil), "osmosis.incentives.CurrentReward")
	proto.RegisterType((*LastEligibleEpochByDurationAndDenom)(nil), "osmosis.incentives.LastEligibleEpochByDurationAndDenom")
	proto.RegisterType((*PeriodLockReward)(nil), "osmosis.incentives.PeriodLockReward")
}

func init() { proto.RegisterFile("osmosis/incentives/gauge.proto", fileDescriptor_c0304e2bb0159901) }

var fileDescriptor_c0304e2bb0159901 = []byte{
	// 846 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x4f, 0x6f, 0xdc, 0x44,
	0x14, 0xcf, 0xec, 0x9f, 0xa4, 0x99, 0x6c, 0x20, 0x19, 0x6d, 0x55, 0x27, 0x50, 0xef, 0xb2, 0x15,
	0x62, 0x25, 0x54, 0xbb, 0x4d, 0x0f, 0x48, 0xdc, 0xd8, 0xa4, 0x82, 0x48, 0x91, 0x08, 0xa6, 0x07,
	0x04, 0x07, 0x6b, 0x6c, 0x4f, 0x9c, 0x51, 0xc6, 0x1e, 0x6b, 0x66, 0x1c, 0x9a, 0x6f, 0x00, 0xb7,
	0x0a, 0x2e, 0x7c, 0x06, 0x0e, 0x9c, 0xf8, 0x10, 0x3d, 0xf6, 0xc8, 0xa9, 0x45, 0xc9, 0x37, 0xe0,
	0x8e, 0x84, 0xe6, 0x1f, 0xbb, 0x24, 0x28, 0xca, 0x21, 0x3d, 0xd9, 0xf3, 0xde, 0xbc, 0xf7, 0x7e,
	0xef, 0xf7, 0x7e, 0xcf, 0x86, 0x21, 0x97, 0x15, 0x97, 0x54, 0xc6, 0xb4, 0xce, 0x49, 0xad, 0xe8,
	0x29, 0x91, 0x71, 0x89, 0xdb, 0x92, 0x44, 0x8d, 0xe0, 0x8a, 0x23, 0xe4, 0xfc, 0xd1, 0xdc, 0xbf,
	0x3d, 0x2c, 0x79, 0xc9, 0x8d, 0x3b, 0xd6, 0x6f, 0xf6, 0xe6, 0x76, 0x58, 0x72, 0x5e, 0x32, 0x12,
	0x9b, 0x53, 0xd6, 0x1e, 0xc5, 0x45, 0x2b, 0xb0, 0xa2, 0xbc, 0x76, 0xfe, 0xd1, 0x65, 0xbf, 0xa2,
	0x15, 0x91, 0x0a, 0x57, 0x8d, 0x4f, 0x90, 0x9b, 0x5a, 0x71, 0x86, 0x25, 0x89, 0x4f, 0x1f, 0x67,
	0x44, 0xe1, 0xc7, 0x71, 0xce, 0xa9, 0x4f, 0xb0, 0xe5, 0xa1, 0x32, 0x9e, 0x9f, 0xb4, 0x8d, 0x79,
	0x58, 0xd7, 0xe4, 0xa7, 0x1e, 0xec, 0x7f, 0xae, 0x51, 0xa3, 0x77, 0x60, 0x87, 0x16, 0x01, 0x18,
	0x83, 0x69, 0x2f, 0xe9, 0xd0, 0x02, 0x7d, 0x00, 0x07, 0x54, 0xa6, 0x0d, 0x11, 0x0d, 0x51, 0x2d,
	0x66, 0x41, 0x67, 0x0c, 0xa6, 0x77, 0x92, 0x35, 0x2a, 0x0f, 0xbd, 0x09, 0xed, 0xc3, 0xf5, 0x82,
	0x4a, 0x25, 0x68, 0xd6, 0x2a, 0x92, 0x2a, 0x1e, 0x74, 0xc7, 0x60, 0xba, 0xb6, 0x13, 0x46, 0xbe,
	0x75, 0x5b, 0x2f, 0xfa, 0xaa, 0x25, 0xe2, 0x6c, 0x97, 0xd7, 0x05, 0xd5, 0x5d, 0xcd, 0x7a, 0x2f,
	0x5f, 0x8f, 0x96, 0x92, 0xc1, 0x3c, 0xf4, 0x19, 0x47, 0x18, 0xf6, 0x35, 0x60, 0x19, 0xf4, 0xc6,
	0xdd, 0xe9, 0xda, 0xce, 0x56, 0x64, 0x5b, 0x8a, 0x74, 0x4b, 0x91, 0x6b, 0x29, 0xda, 0xe5, 0xb4,
	0x9e, 0x3d, 0xd2, 0xd1, 0xbf, 0xbe, 0x19, 0x4d, 0x4b, 0xaa, 0x8e, 0xdb, 0x2c, 0xca, 0x79, 0x15,
	0xbb, 0xfe, 0xed, 0xe3, 0xa1, 0x2c, 0x4e, 0x62, 0x75, 0xd6, 0x10, 0x69, 0x02, 0x64, 0x62, 0x33,
	0xa3, 0x6f, 0x20, 0x94, 0x0a, 0x0b, 0x95, 0x6a, 0xfa, 0x82, 0xbe, 0x81, 0xba, 0x1d, 0x59, 0x6e,
	0x23, 0xcf, 0x6d, 0xf4, 0xcc, 0x73, 0x3b, 0xbb, 0xaf, 0x0b, 0xfd, 0xf5, 0x7a, 0xb4, 0x79, 0x86,
	0x2b, 0xf6, 0xe9, 0x64, 0x1e, 0x3b, 0x79, 0xf1, 0x66, 0x04, 0x92, 0x55, 0x63, 0xd0, 0xd7, 0x51,
	0x0c, 0x87, 0x75, 0x5b, 0xa5, 0xa4, 0xe1, 0xf9, 0xb1, 0x4c, 0x1b, 0x4c, 0x8b, 0x94, 0x9f, 0x12,
	0x11, 0x2c, 0x1b, 0x32, 0x37, 0xeb, 0xb6, 0x7a, 0x6a, 0x5c, 0x87, 0x98, 0x16, 0x5f, 0x9e, 0x12,
	0x81, 0x1e, 0xc0, 0xf5, 0x23, 0xca, 0x18, 0x29, 0x5c, 0x4c, 0xb0, 0x62, 0x6e, 0x0e, 0xac, 0xd1,
	0x5e, 0x46, 0xcf, 0xe1, 0xe6, 0x9c, 0xa2, 0x22, 0xb5, 0xf4, 0xdc, 0xb9, 0x7d, 0x7a, 0x36, 0x16,
	0xaa, 0x18, 0xcb, 0xe4, 0x07, 0x00, 0xef, 0x1e, 0xf0, 0xfc, 0x04, 0x67, 0x8c, 0xec, 0x39, 0x2d,
	0xca, 0xfd, 0xfa, 0x88, 0x23, 0x0e, 0x11, 0x73, 0x8e, 0xd4, 0xab, 0x54, 0x06, 0xc0, 0x81, 0xba,
	0xcc, 0xa5, 0x8f, 0x9d, 0x7d, 0xe8, 0xa8, 0xdc, 0xb2, 0x54, 0x5e, 0x4d, 0x31, 0xf9, 0x45, 0x53,
	0xba, 0xc9, 0x2e, 0x17, 0x9d, 0xfc, 0x0e, 0xe0, 0xc6, 0x17, 0x54, 0x2a, 0x2e, 0x68, 0x8e, 0x59,
	0x42, 0xbe, 0xc7, 0xa2, 0x40, 0x3f, 0x02, 0x78, 0x2f, 0x6f, 0xab, 0x96, 0x61, 0xbd, 0x56, 0xa9,
	0x30, 0xd6, 0xd4, 0x84, 0x38, 0x2c, 0xef, 0xff, 0x2f, 0x41, 0x7b, 0x24, 0x37, 0x1c, 0x3d, 0x71,
	0x1c, 0x7d, 0x7c, 0x03, 0x8e, 0x5c, 0x8c, 0x4c, 0xee, 0xce, 0x2b, 0x5a, 0x18, 0x89, 0xae, 0x87,
	0x86, 0xb0, 0x6f, 0x66, 0x68, 0xf6, 0xa3, 0x9b, 0xd8, 0xc3, 0xe4, 0xe7, 0x2e, 0x5c, 0xdf, 0x6d,
	0x85, 0x20, 0xb5, 0x72, 0x98, 0x1f, 0xc1, 0x21, 0xc3, 0x52, 0xa5, 0x8d, 0xe0, 0x39, 0x91, 0xd2,
	0x8f, 0xde, 0x2c, 0x5c, 0x37, 0x41, 0xda, 0x77, 0xe8, 0x5d, 0x46, 0x00, 0xa8, 0x82, 0x03, 0xc5,
	0x15, 0x66, 0xa9, 0x3c, 0xc6, 0x82, 0x48, 0x53, 0xe0, 0xda, 0xd1, 0xc7, 0xae, 0xad, 0x8f, 0x6e,
	0x38, 0xfa, 0x64, 0xcd, 0xe4, 0xff, 0xda, 0xa4, 0x47, 0x04, 0xae, 0x58, 0x22, 0x65, 0xd0, 0xbd,
	0x7d, 0x91, 0xf9, 0xdc, 0xe8, 0x3e, 0x84, 0x7a, 0xca, 0x69, 0x41, 0x6a, 0x5e, 0x05, 0xbd, 0x31,
	0x98, 0xae, 0x26, 0xab, 0xda, 0xb2, 0xa7, 0x0d, 0xe8, 0x3b, 0xb8, 0x6e, 0xdd, 0x4e, 0x01, 0x6e,
	0x4f, 0xaf, 0xd1, 0xd6, 0x7b, 0x4e, 0x5b, 0xef, 0x5a, 0x6d, 0xf9, 0x40, 0xab, 0xa8, 0x81, 0xc9,
	0xec, 0x4d, 0xbf, 0x01, 0xf8, 0xe0, 0x00, 0x4b, 0xf5, 0x94, 0xd1, 0x92, 0x66, 0x8c, 0x18, 0x9e,
	0x67, 0x67, 0xde, 0xff, 0x59, 0x5d, 0x58, 0x10, 0x43, 0xd8, 0xb7, 0xf0, 0x80, 0x81, 0x67, 0x0f,
	0x57, 0xa1, 0x75, 0x6e, 0x0f, 0xda, 0x5c, 0x46, 0xdd, 0x45, 0x19, 0xfd, 0x0d, 0xe0, 0xc6, 0x21,
	0x11, 0x94, 0x17, 0x7a, 0x1d, 0x9d, 0x92, 0xee, 0xc1, 0x15, 0x83, 0xe3, 0xdf, 0xaf, 0xf5, 0xb2,
	0x3e, 0xee, 0x17, 0x8b, 0x13, 0xec, 0xbc, 0xc5, 0x09, 0x52, 0xa7, 0x64, 0xe2, 0x58, 0xf4, 0xdf,
	0x30, 0xab, 0x9a, 0x4f, 0xa2, 0xab, 0xff, 0xbd, 0xe8, 0x06, 0xa4, 0xdb, 0x15, 0xf8, 0xcf, 0x25,
	0x39, 0x3b, 0x78, 0x79, 0x1e, 0x82, 0x57, 0xe7, 0x21, 0xf8, 0xf3, 0x3c, 0x04, 0x2f, 0x2e, 0xc2,
	0xa5, 0x57, 0x17, 0xe1, 0xd2, 0x1f, 0x17, 0xe1, 0xd2, 0xb7, 0x3b, 0x0b, 0xb8, 0x5d, 0xc1, 0x87,
	0x0c, 0x67, 0xd2, 0x1f, 0xe2, 0xe7, 0x8b, 0xff, 0x65, 0xd3, 0x47, 0xb6, 0x6c, 0x26, 0xf4, 0xe4,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x58, 0x8b, 0xe4, 0x8f, 0xba, 0x07, 0x00, 0x00,
}

func (m *Gauge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Gauge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Gauge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DistributedCoins) > 0 {
		for iNdEx := len(m.DistributedCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DistributedCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGauge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.FilledEpochs != 0 {
		i = encodeVarintGauge(dAtA, i, uint64(m.FilledEpochs))
		i--
		dAtA[i] = 0x38
	}
	if m.NumEpochsPaidOver != 0 {
		i = encodeVarintGauge(dAtA, i, uint64(m.NumEpochsPaidOver))
		i--
		dAtA[i] = 0x30
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintGauge(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x2a
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGauge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.DistributeTo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGauge(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.IsPerpetual {
		i--
		if m.IsPerpetual {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintGauge(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LockableDurationsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockableDurationsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockableDurationsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LockableDurations) > 0 {
		for iNdEx := len(m.LockableDurations) - 1; iNdEx >= 0; iNdEx-- {
			n, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.LockableDurations[iNdEx], dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.LockableDurations[iNdEx]):])
			if err != nil {
				return 0, err
			}
			i -= n
			i = encodeVarintGauge(dAtA, i, uint64(n))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HistoricalReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoricalReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoricalReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		i = encodeVarintGauge(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CumulativeRewardRatio) > 0 {
		for iNdEx := len(m.CumulativeRewardRatio) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CumulativeRewardRatio[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGauge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CurrentReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrentReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurrentReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.LockDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.LockDuration):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintGauge(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x2a
	if len(m.LockDenom) > 0 {
		i -= len(m.LockDenom)
		copy(dAtA[i:], m.LockDenom)
		i = encodeVarintGauge(dAtA, i, uint64(len(m.LockDenom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGauge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.TotalShares.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGauge(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.LastProcessedEpoch != 0 {
		i = encodeVarintGauge(dAtA, i, uint64(m.LastProcessedEpoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LastEligibleEpochByDurationAndDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastEligibleEpochByDurationAndDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastEligibleEpochByDurationAndDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		i = encodeVarintGauge(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	n5, err5 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.LockDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.LockDuration):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintGauge(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGauge(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PeriodLockReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeriodLockReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeriodLockReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastEligibleEpochs) > 0 {
		for iNdEx := len(m.LastEligibleEpochs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LastEligibleEpochs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGauge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGauge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.LockId != 0 {
		i = encodeVarintGauge(dAtA, i, uint64(m.LockId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGauge(dAtA []byte, offset int, v uint64) int {
	offset -= sovGauge(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Gauge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGauge(uint64(m.Id))
	}
	if m.IsPerpetual {
		n += 2
	}
	l = m.DistributeTo.Size()
	n += 1 + l + sovGauge(uint64(l))
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovGauge(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovGauge(uint64(l))
	if m.NumEpochsPaidOver != 0 {
		n += 1 + sovGauge(uint64(m.NumEpochsPaidOver))
	}
	if m.FilledEpochs != 0 {
		n += 1 + sovGauge(uint64(m.FilledEpochs))
	}
	if len(m.DistributedCoins) > 0 {
		for _, e := range m.DistributedCoins {
			l = e.Size()
			n += 1 + l + sovGauge(uint64(l))
		}
	}
	return n
}

func (m *LockableDurationsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LockableDurations) > 0 {
		for _, e := range m.LockableDurations {
			l = github_com_gogo_protobuf_types.SizeOfStdDuration(e)
			n += 1 + l + sovGauge(uint64(l))
		}
	}
	return n
}

func (m *HistoricalReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CumulativeRewardRatio) > 0 {
		for _, e := range m.CumulativeRewardRatio {
			l = e.Size()
			n += 1 + l + sovGauge(uint64(l))
		}
	}
	if m.Epoch != 0 {
		n += 1 + sovGauge(uint64(m.Epoch))
	}
	return n
}

func (m *CurrentReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastProcessedEpoch != 0 {
		n += 1 + sovGauge(uint64(m.LastProcessedEpoch))
	}
	l = m.TotalShares.Size()
	n += 1 + l + sovGauge(uint64(l))
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovGauge(uint64(l))
		}
	}
	l = len(m.LockDenom)
	if l > 0 {
		n += 1 + l + sovGauge(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.LockDuration)
	n += 1 + l + sovGauge(uint64(l))
	return n
}

func (m *LastEligibleEpochByDurationAndDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGauge(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.LockDuration)
	n += 1 + l + sovGauge(uint64(l))
	if m.Epoch != 0 {
		n += 1 + sovGauge(uint64(m.Epoch))
	}
	return n
}

func (m *PeriodLockReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LockId != 0 {
		n += 1 + sovGauge(uint64(m.LockId))
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovGauge(uint64(l))
		}
	}
	if len(m.LastEligibleEpochs) > 0 {
		for _, e := range m.LastEligibleEpochs {
			l = e.Size()
			n += 1 + l + sovGauge(uint64(l))
		}
	}
	return n
}

func sovGauge(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGauge(x uint64) (n int) {
	return sovGauge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Gauge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gauge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gauge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPerpetual", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPerpetual = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributeTo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DistributeTo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types1.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEpochsPaidOver", wireType)
			}
			m.NumEpochsPaidOver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEpochsPaidOver |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilledEpochs", wireType)
			}
			m.FilledEpochs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FilledEpochs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributedCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributedCoins = append(m.DistributedCoins, types1.Coin{})
			if err := m.DistributedCoins[len(m.DistributedCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGauge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGauge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockableDurationsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockableDurationsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockableDurationsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockableDurations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockableDurations = append(m.LockableDurations, time.Duration(0))
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&(m.LockableDurations[len(m.LockableDurations)-1]), dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGauge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGauge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoricalReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoricalReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoricalReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeRewardRatio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CumulativeRewardRatio = append(m.CumulativeRewardRatio, types1.DecCoin{})
			if err := m.CumulativeRewardRatio[len(m.CumulativeRewardRatio)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGauge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGauge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrentReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrentReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrentReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastProcessedEpoch", wireType)
			}
			m.LastProcessedEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastProcessedEpoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types1.Coin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.LockDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGauge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGauge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastEligibleEpochByDurationAndDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastEligibleEpochByDurationAndDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastEligibleEpochByDurationAndDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.LockDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGauge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGauge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeriodLockReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeriodLockReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeriodLockReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockId", wireType)
			}
			m.LockId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types1.Coin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastEligibleEpochs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGauge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGauge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastEligibleEpochs = append(m.LastEligibleEpochs, &LastEligibleEpochByDurationAndDenom{})
			if err := m.LastEligibleEpochs[len(m.LastEligibleEpochs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGauge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGauge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGauge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGauge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGauge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGauge
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGauge
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGauge
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGauge        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGauge          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGauge = fmt.Errorf("proto: unexpected end of group")
)
