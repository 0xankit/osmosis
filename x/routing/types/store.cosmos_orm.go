// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package types

import (
	context "context"
	ormlist "github.com/cosmos/cosmos-sdk/orm/model/ormlist"
	ormtable "github.com/cosmos/cosmos-sdk/orm/model/ormtable"
	ormerrors "github.com/cosmos/cosmos-sdk/orm/types/ormerrors"
)

type RouteTable interface {
	Insert(ctx context.Context, route *Route) error
	Update(ctx context.Context, route *Route) error
	Save(ctx context.Context, route *Route) error
	Delete(ctx context.Context, route *Route) error
	Has(ctx context.Context, name string) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, name string) (*Route, error)
	HasByChannel(ctx context.Context, channel string) (found bool, err error)
	// GetByChannel returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByChannel(ctx context.Context, channel string) (*Route, error)
	HasByDenom(ctx context.Context, denom string) (found bool, err error)
	// GetByDenom returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	GetByDenom(ctx context.Context, denom string) (*Route, error)
	List(ctx context.Context, prefixKey RouteIndexKey, opts ...ormlist.Option) (RouteIterator, error)
	ListRange(ctx context.Context, from, to RouteIndexKey, opts ...ormlist.Option) (RouteIterator, error)
	DeleteBy(ctx context.Context, prefixKey RouteIndexKey) error
	DeleteRange(ctx context.Context, from, to RouteIndexKey) error

	doNotImplement()
}

type RouteIterator struct {
	ormtable.Iterator
}

func (i RouteIterator) Value() (*Route, error) {
	var route Route
	err := i.UnmarshalMessage(&route)
	return &route, err
}

type RouteIndexKey interface {
	id() uint32
	values() []interface{}
	routeIndexKey()
}

// primary key starting index..
type RoutePrimaryKey = RouteNameIndexKey

type RouteNameIndexKey struct {
	vs []interface{}
}

func (x RouteNameIndexKey) id() uint32            { return 0 }
func (x RouteNameIndexKey) values() []interface{} { return x.vs }
func (x RouteNameIndexKey) routeIndexKey()        {}

func (this RouteNameIndexKey) WithName(name string) RouteNameIndexKey {
	this.vs = []interface{}{name}
	return this
}

type RouteChannelIndexKey struct {
	vs []interface{}
}

func (x RouteChannelIndexKey) id() uint32            { return 1 }
func (x RouteChannelIndexKey) values() []interface{} { return x.vs }
func (x RouteChannelIndexKey) routeIndexKey()        {}

func (this RouteChannelIndexKey) WithChannel(channel string) RouteChannelIndexKey {
	this.vs = []interface{}{channel}
	return this
}

type RouteDenomIndexKey struct {
	vs []interface{}
}

func (x RouteDenomIndexKey) id() uint32            { return 2 }
func (x RouteDenomIndexKey) values() []interface{} { return x.vs }
func (x RouteDenomIndexKey) routeIndexKey()        {}

func (this RouteDenomIndexKey) WithDenom(denom string) RouteDenomIndexKey {
	this.vs = []interface{}{denom}
	return this
}

type routeTable struct {
	table ormtable.Table
}

func (this routeTable) Insert(ctx context.Context, route *Route) error {
	return this.table.Insert(ctx, route)
}

func (this routeTable) Update(ctx context.Context, route *Route) error {
	return this.table.Update(ctx, route)
}

func (this routeTable) Save(ctx context.Context, route *Route) error {
	return this.table.Save(ctx, route)
}

func (this routeTable) Delete(ctx context.Context, route *Route) error {
	return this.table.Delete(ctx, route)
}

func (this routeTable) Has(ctx context.Context, name string) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, name)
}

func (this routeTable) Get(ctx context.Context, name string) (*Route, error) {
	var route Route
	found, err := this.table.PrimaryKey().Get(ctx, &route, name)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &route, nil
}

func (this routeTable) HasByChannel(ctx context.Context, channel string) (found bool, err error) {
	return this.table.GetIndexByID(1).(ormtable.UniqueIndex).Has(ctx,
		channel,
	)
}

func (this routeTable) GetByChannel(ctx context.Context, channel string) (*Route, error) {
	var route Route
	found, err := this.table.GetIndexByID(1).(ormtable.UniqueIndex).Get(ctx, &route,
		channel,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &route, nil
}

func (this routeTable) HasByDenom(ctx context.Context, denom string) (found bool, err error) {
	return this.table.GetIndexByID(2).(ormtable.UniqueIndex).Has(ctx,
		denom,
	)
}

func (this routeTable) GetByDenom(ctx context.Context, denom string) (*Route, error) {
	var route Route
	found, err := this.table.GetIndexByID(2).(ormtable.UniqueIndex).Get(ctx, &route,
		denom,
	)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &route, nil
}

func (this routeTable) List(ctx context.Context, prefixKey RouteIndexKey, opts ...ormlist.Option) (RouteIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return RouteIterator{it}, err
}

func (this routeTable) ListRange(ctx context.Context, from, to RouteIndexKey, opts ...ormlist.Option) (RouteIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return RouteIterator{it}, err
}

func (this routeTable) DeleteBy(ctx context.Context, prefixKey RouteIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this routeTable) DeleteRange(ctx context.Context, from, to RouteIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this routeTable) doNotImplement() {}

var _ RouteTable = routeTable{}

func NewRouteTable(db ormtable.Schema) (RouteTable, error) {
	table := db.GetTable(&Route{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Route{}).ProtoReflect().Descriptor().FullName()))
	}
	return routeTable{table}, nil
}

type StoreStore interface {
	RouteTable() RouteTable

	doNotImplement()
}

type storeStore struct {
	route RouteTable
}

func (x storeStore) RouteTable() RouteTable {
	return x.route
}

func (storeStore) doNotImplement() {}

var _ StoreStore = storeStore{}

func NewStoreStore(db ormtable.Schema) (StoreStore, error) {
	routeTable, err := NewRouteTable(db)
	if err != nil {
		return nil, err
	}

	return storeStore{
		routeTable,
	}, nil
}
