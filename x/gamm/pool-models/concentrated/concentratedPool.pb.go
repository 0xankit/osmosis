// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/gamm/pool-models/concentrated/concentratedPool.proto

// this is a legacy package that requires additional migration logic
// in order to use the correct packge. Decision made to use legacy package path
// until clear steps for migration logic and the unknowns for state breaking are
// investigated for changing proto package.

package concentrated

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/x/auth/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Pool struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// This string specifies who will govern the pool in the future.
	// Valid forms of this are:
	// {token name},{duration}
	// {duration}
	// where {token name} if specified is the token which determines the
	// governor, and if not specified is the LP token for this pool.duration is
	// a time specified as 0w,1w,2w, etc. which specifies how long the token
	// would need to be locked up to count in governance. 0w means no lockup.
	// TODO: Further improve these docs
	FuturePoolGovernor string `protobuf:"bytes,3,opt,name=future_pool_governor,json=futurePoolGovernor,proto3" json:"future_pool_governor,omitempty" yaml:"future_pool_governor"`
	// sum of all LP tokens sent out
	TotalShares types.Coin `protobuf:"bytes,4,opt,name=total_shares,json=totalShares,proto3" json:"total_shares" yaml:"total_shares"`
}

func (m *Pool) Reset()      { *m = Pool{} }
func (*Pool) ProtoMessage() {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6b56753cbe8fa1a, []int{0}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Pool)(nil), "osmosis.gamm.poolmodels.concentrated.v1beta1.Pool")
}

func init() {
	proto.RegisterFile("osmosis/gamm/pool-models/concentrated/concentratedPool.proto", fileDescriptor_f6b56753cbe8fa1a)
}

var fileDescriptor_f6b56753cbe8fa1a = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x3f, 0x6f, 0xd3, 0x40,
	0x1c, 0xb5, 0x43, 0x00, 0xe1, 0xa2, 0x4a, 0x98, 0x0e, 0x69, 0x2b, 0xf9, 0x22, 0x4f, 0x19, 0x9a,
	0x3b, 0xa5, 0x6c, 0x15, 0x53, 0x3a, 0x20, 0x36, 0x08, 0x13, 0x48, 0xc8, 0x3a, 0xdb, 0x57, 0xe7,
	0x24, 0x9f, 0x7f, 0xd1, 0xdd, 0x39, 0x82, 0x0f, 0x80, 0xc4, 0xc8, 0xc8, 0xd8, 0x0f, 0xc1, 0x87,
	0xa8, 0x98, 0x3a, 0x32, 0x59, 0x28, 0xf9, 0x06, 0xf9, 0x04, 0xe8, 0xfe, 0x18, 0x95, 0x08, 0x75,
	0xbb, 0xf7, 0x7b, 0xbf, 0xf7, 0xde, 0xdd, 0xd3, 0x45, 0x2f, 0x41, 0x09, 0x50, 0x5c, 0x91, 0x8a,
	0x0a, 0x41, 0x56, 0x00, 0xf5, 0x54, 0x40, 0xc9, 0x6a, 0x45, 0x0a, 0x68, 0x0a, 0xd6, 0x68, 0x49,
	0x35, 0x2b, 0xff, 0x01, 0x6f, 0x00, 0x6a, 0xbc, 0x92, 0xa0, 0x21, 0x3e, 0xf3, 0x6a, 0x6c, 0xd4,
	0xd8, 0xa8, 0x9d, 0x18, 0xdf, 0xdd, 0xc7, 0xeb, 0x59, 0xce, 0x34, 0x9d, 0x9d, 0x1c, 0x17, 0x76,
	0x3d, 0xb3, 0x5a, 0xe2, 0x80, 0x33, 0x3a, 0x39, 0xaa, 0xa0, 0x02, 0x37, 0x37, 0x27, 0x3f, 0x4d,
	0x2a, 0x80, 0xaa, 0x66, 0xc4, 0xa2, 0xbc, 0xbd, 0x22, 0x65, 0x2b, 0xa9, 0xe6, 0xd0, 0x78, 0x1e,
	0xed, 0xf3, 0x9a, 0x0b, 0xa6, 0x34, 0x15, 0xab, 0xde, 0xc0, 0x85, 0x10, 0xda, 0xea, 0x25, 0xf1,
	0xd7, 0xb0, 0x60, 0x8f, 0xcf, 0xa9, 0x62, 0x7f, 0xf9, 0x02, 0xb8, 0x0f, 0x48, 0xbf, 0x0c, 0xa2,
	0xa1, 0x79, 0x6e, 0x7c, 0x16, 0x3d, 0xa6, 0x65, 0x29, 0x99, 0x52, 0xa3, 0x70, 0x1c, 0x4e, 0x9e,
	0xcc, 0xe3, 0x5d, 0x87, 0x0e, 0x3f, 0x53, 0x51, 0x5f, 0xa4, 0x9e, 0x48, 0x17, 0xfd, 0x4a, 0x7c,
	0x18, 0x0d, 0x78, 0x39, 0x1a, 0x8c, 0xc3, 0xc9, 0x70, 0x31, 0xe0, 0x65, 0xfc, 0x36, 0x3a, 0xba,
	0x6a, 0x75, 0x2b, 0x59, 0x66, 0x2a, 0xca, 0x2a, 0x58, 0x33, 0xd9, 0x80, 0x1c, 0x3d, 0xb0, 0x56,
	0x68, 0xd7, 0xa1, 0x53, 0x67, 0xf5, 0xbf, 0xad, 0x74, 0x11, 0xbb, 0xb1, 0xb9, 0xc8, 0x2b, 0x3f,
	0x8c, 0xdf, 0x47, 0x4f, 0x35, 0x68, 0x5a, 0x67, 0x6a, 0x49, 0x25, 0x53, 0xa3, 0xe1, 0x38, 0x9c,
	0x1c, 0x9c, 0x1f, 0x63, 0xdf, 0xaa, 0x79, 0x50, 0xdf, 0x3b, 0xbe, 0x04, 0xde, 0xcc, 0x4f, 0x6f,
	0x3a, 0x14, 0xec, 0x3a, 0xf4, 0xdc, 0x25, 0xdd, 0x15, 0xa7, 0x8b, 0x03, 0x0b, 0xdf, 0x59, 0x74,
	0xf1, 0xec, 0xeb, 0x35, 0x0a, 0xbe, 0x5f, 0xa3, 0xe0, 0xe7, 0x8f, 0xe9, 0x43, 0x13, 0xfa, 0x7a,
	0xfe, 0xf1, 0x66, 0x93, 0x84, 0xb7, 0x9b, 0x24, 0xfc, 0xbd, 0x49, 0xc2, 0x6f, 0xdb, 0x24, 0xb8,
	0xdd, 0x26, 0xc1, 0xaf, 0x6d, 0x12, 0x7c, 0xb8, 0xac, 0xb8, 0x5e, 0xb6, 0x39, 0x2e, 0x40, 0x10,
	0xff, 0x19, 0xa6, 0x35, 0xcd, 0x55, 0x0f, 0xc8, 0x7a, 0x76, 0x4e, 0x3e, 0xdd, 0xff, 0xbb, 0xf2,
	0x47, 0xb6, 0xed, 0x17, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x8a, 0xc8, 0x46, 0x3e, 0x8d, 0x02,
	0x00, 0x00,
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TotalShares.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintConcentratedPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.FuturePoolGovernor) > 0 {
		i -= len(m.FuturePoolGovernor)
		copy(dAtA[i:], m.FuturePoolGovernor)
		i = encodeVarintConcentratedPool(dAtA, i, uint64(len(m.FuturePoolGovernor)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintConcentratedPool(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintConcentratedPool(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintConcentratedPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovConcentratedPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovConcentratedPool(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovConcentratedPool(uint64(m.Id))
	}
	l = len(m.FuturePoolGovernor)
	if l > 0 {
		n += 1 + l + sovConcentratedPool(uint64(l))
	}
	l = m.TotalShares.Size()
	n += 1 + l + sovConcentratedPool(uint64(l))
	return n
}

func sovConcentratedPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConcentratedPool(x uint64) (n int) {
	return sovConcentratedPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConcentratedPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConcentratedPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConcentratedPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConcentratedPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConcentratedPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuturePoolGovernor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConcentratedPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConcentratedPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConcentratedPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FuturePoolGovernor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConcentratedPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConcentratedPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConcentratedPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConcentratedPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConcentratedPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConcentratedPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConcentratedPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConcentratedPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConcentratedPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConcentratedPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConcentratedPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConcentratedPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConcentratedPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConcentratedPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConcentratedPool = fmt.Errorf("proto: unexpected end of group")
)
