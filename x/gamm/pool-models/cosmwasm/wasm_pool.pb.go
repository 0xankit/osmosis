// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/gamm/pool-models/cosmwasm/wasm_pool.proto

package cosmwasm

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/x/auth/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PoolParams defined the parameters that will be managed by the pool
// governance in the future. This params are not managed by the chain
// governance. Instead they will be managed by the token holders of the pool.
// The pool's token holders are specified in future_pool_governor.
type PoolParams struct {
	CosmwasmAddress string `protobuf:"bytes,1,opt,name=cosmwasm_address,json=cosmwasmAddress,proto3" json:"cosmwasm_address,omitempty" yaml:"cosmwasm_address"`
}

func (m *PoolParams) Reset()         { *m = PoolParams{} }
func (m *PoolParams) String() string { return proto.CompactTextString(m) }
func (*PoolParams) ProtoMessage()    {}
func (*PoolParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d10a3bfea63db8c, []int{0}
}
func (m *PoolParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolParams.Merge(m, src)
}
func (m *PoolParams) XXX_Size() int {
	return m.Size()
}
func (m *PoolParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolParams.DiscardUnknown(m)
}

var xxx_messageInfo_PoolParams proto.InternalMessageInfo

func (m *PoolParams) GetCosmwasmAddress() string {
	if m != nil {
		return m.CosmwasmAddress
	}
	return ""
}

// Pool is the stableswap Pool struct
type Pool struct {
	Address    string     `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	Id         uint64     `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	PoolParams PoolParams `protobuf:"bytes,3,opt,name=pool_params,json=poolParams,proto3" json:"pool_params" yaml:"cosmwasm_pool_params"`
}

func (m *Pool) Reset()      { *m = Pool{} }
func (*Pool) ProtoMessage() {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d10a3bfea63db8c, []int{1}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PoolParams)(nil), "osmosis.gamm.poolmodels.cosmwasm.v1beta1.PoolParams")
	proto.RegisterType((*Pool)(nil), "osmosis.gamm.poolmodels.cosmwasm.v1beta1.Pool")
}

func init() {
	proto.RegisterFile("osmosis/gamm/pool-models/cosmwasm/wasm_pool.proto", fileDescriptor_1d10a3bfea63db8c)
}

var fileDescriptor_1d10a3bfea63db8c = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcb, 0x6a, 0xdb, 0x40,
	0x14, 0xd5, 0xb8, 0x6e, 0x4b, 0xc7, 0xe0, 0xb6, 0xa2, 0x50, 0xd7, 0x06, 0xc9, 0xa8, 0x1b, 0x2d,
	0xea, 0x99, 0xaa, 0xed, 0xca, 0x9b, 0x52, 0x2f, 0x0a, 0xdd, 0x19, 0xd3, 0x4d, 0xbb, 0x11, 0xa3,
	0x47, 0x64, 0x81, 0x26, 0x57, 0x68, 0x24, 0xe7, 0xf1, 0x05, 0x59, 0x66, 0x99, 0xa5, 0x3f, 0x22,
	0x1f, 0x61, 0xb2, 0x32, 0x64, 0x93, 0x95, 0x08, 0xf6, 0x1f, 0xf8, 0x0b, 0xc2, 0xe8, 0xe1, 0x24,
	0x82, 0x40, 0x36, 0x42, 0xe7, 0x9c, 0x7b, 0xce, 0xbd, 0x57, 0x57, 0xd8, 0x02, 0xc1, 0x41, 0x84,
	0x82, 0x06, 0x8c, 0x73, 0x1a, 0x03, 0x44, 0x23, 0x0e, 0x9e, 0x1f, 0x09, 0xea, 0x82, 0xe0, 0x47,
	0x4c, 0x70, 0x2a, 0x1f, 0xb6, 0x54, 0x48, 0x9c, 0x40, 0x0a, 0xaa, 0x59, 0x59, 0x88, 0xb4, 0x10,
	0x29, 0x94, 0x0e, 0x52, 0x3b, 0xc8, 0xc2, 0x72, 0xfc, 0x94, 0x59, 0xfd, 0x4f, 0x6e, 0x51, 0x6a,
	0x17, 0x3e, 0x5a, 0x82, 0x32, 0xa4, 0xff, 0x21, 0x80, 0x00, 0x4a, 0x5e, 0xbe, 0x55, 0xac, 0x16,
	0x00, 0x04, 0x91, 0x4f, 0x0b, 0xe4, 0x64, 0x07, 0xd4, 0xcb, 0x12, 0x96, 0x86, 0x70, 0x58, 0xe9,
	0x7a, 0x53, 0x4f, 0x43, 0xee, 0x8b, 0x94, 0xf1, 0xb8, 0x0e, 0x28, 0x9b, 0x50, 0x96, 0xa5, 0x73,
	0x5a, 0x8d, 0x51, 0x80, 0x86, 0xee, 0x30, 0xe1, 0xef, 0x75, 0x17, 0xc2, 0xaa, 0x81, 0xf1, 0x17,
	0xe3, 0x29, 0x40, 0x34, 0x65, 0x09, 0xe3, 0x42, 0xfd, 0x8d, 0xdf, 0xd5, 0x3b, 0xd9, 0xcc, 0xf3,
	0x12, 0x5f, 0x88, 0x1e, 0x1a, 0x22, 0xf3, 0xcd, 0x64, 0xb0, 0xcb, 0xf5, 0x8f, 0x27, 0x8c, 0x47,
	0x63, 0xa3, 0x59, 0x61, 0xcc, 0xde, 0xd6, 0xd4, 0xaf, 0x8a, 0xb9, 0x46, 0xb8, 0x2d, 0x63, 0xd5,
	0x2f, 0xf8, 0xf5, 0xe3, 0x1c, 0x75, 0x97, 0xeb, 0xdd, 0x32, 0x67, 0x6f, 0xaf, 0x4b, 0xd4, 0x2e,
	0x6e, 0x85, 0x5e, 0xaf, 0x35, 0x44, 0x66, 0x7b, 0xd6, 0x0a, 0x3d, 0xf5, 0x14, 0x77, 0xe4, 0xd7,
	0xb6, 0xe3, 0x62, 0xba, 0xde, 0x8b, 0x21, 0x32, 0x3b, 0xdf, 0x7e, 0x90, 0xe7, 0x9e, 0x83, 0xdc,
	0x6f, 0x36, 0xf9, 0xbc, 0xca, 0x75, 0x65, 0x97, 0xeb, 0x83, 0xc6, 0x0e, 0x0f, 0xf2, 0x8d, 0x19,
	0x8e, 0xf7, 0x86, 0xf1, 0xfb, 0xb3, 0xa5, 0xae, 0x5c, 0x2c, 0x75, 0xe5, 0xea, 0x72, 0xf4, 0x52,
	0x06, 0xfd, 0x99, 0xfc, 0x5b, 0x6d, 0x34, 0xb4, 0xde, 0x68, 0xe8, 0x76, 0xa3, 0xa1, 0xf3, 0xad,
	0xa6, 0xac, 0xb7, 0x9a, 0x72, 0xb3, 0xd5, 0x94, 0xff, 0x3f, 0x83, 0x30, 0x9d, 0x67, 0x0e, 0x71,
	0x81, 0xd3, 0x6a, 0xba, 0x51, 0xc4, 0x1c, 0x51, 0x03, 0xba, 0xb0, 0xbe, 0xd2, 0xe3, 0xa7, 0x7f,
	0x39, 0xe7, 0x55, 0x71, 0x8d, 0xef, 0x77, 0x01, 0x00, 0x00, 0xff, 0xff, 0x99, 0xdb, 0x97, 0xcf,
	0x9e, 0x02, 0x00, 0x00,
}

func (m *PoolParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CosmwasmAddress) > 0 {
		i -= len(m.CosmwasmAddress)
		copy(dAtA[i:], m.CosmwasmAddress)
		i = encodeVarintWasmPool(dAtA, i, uint64(len(m.CosmwasmAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PoolParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintWasmPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Id != 0 {
		i = encodeVarintWasmPool(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintWasmPool(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWasmPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovWasmPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PoolParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CosmwasmAddress)
	if l > 0 {
		n += 1 + l + sovWasmPool(uint64(l))
	}
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovWasmPool(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovWasmPool(uint64(m.Id))
	}
	l = m.PoolParams.Size()
	n += 1 + l + sovWasmPool(uint64(l))
	return n
}

func sovWasmPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWasmPool(x uint64) (n int) {
	return sovWasmPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PoolParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmwasmAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmwasmAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWasmPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWasmPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWasmPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWasmPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWasmPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWasmPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWasmPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWasmPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWasmPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWasmPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWasmPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWasmPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWasmPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWasmPool = fmt.Errorf("proto: unexpected end of group")
)
